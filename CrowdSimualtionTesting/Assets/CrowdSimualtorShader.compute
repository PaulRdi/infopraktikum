// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SetPositionsTex
#pragma kernel TestMove
#pragma kernel ResetTex
#pragma kernel Move
#pragma kernel MoveV2
#pragma kernel AvoidStaticObstacles
#pragma enable_d3d11_debug_symbols

struct Agent {
	float3 position;
	float3 orientation;
	float colliderRadius;
	float4x4 modelMatrix;
	float speed;
	float angularVelocity;
	int id;
};

bool IntersectCircle(
	float3 d,
	float3 o,
	float3 otherPosition,
	float otherColliderRadius
);

float GetNextAngle(
	float lastAngle,
	float maxAngle,
	float rayStep,
	float3 otherPosition,
	float colliderRadius,
	float3 direction,
	float3 origin,
	float rayResolution);

float FindFreeAngle(
	float minAngle,
	float maxAngle,
	float3 otherPosition,
	float colliderRadius,
	float3 direction,
	float3 origin,
	float rayResolution);

int FindFreeAngleV2(
	float maxAngle,
	float3 otherPosition,
	float colliderRadius,
	float3 direction,
	float3 origin,
	float rayResolution
);

float4x4 inverse(float4x4 mat);

bool OutOfBounds(int x, int y, int maxX, int maxY);


RWStructuredBuffer<Agent> Agents;
RWTexture2D<float4> WorldState;
Texture2D<float4> WorldStateStatic;
float4x4 INVERSE_MATRIX_P;
float4x4 INVERSE_MATRIX_VP;
float4x4 MATRIX_VP;
float4x4 CAMERA_MATRIX;
float2 screenSize;
float dt;
float resolutionScale;
float2 textureSize;
float RAY_ANGLE;
float RAY_RESOLUTION;
[numthreads(32, 18, 1)]
void ResetTex(uint3 id : SV_DispatchThreadID)
{
	WorldState[id.xy] = float4(0, 0, 0, 1);
}

[numthreads(32,18,1)]
//not getting this to work :(
void SetPositionsTex(uint3 id : SV_DispatchThreadID)
{
	float dist = 10000000;
	//screen coordinates from (0 -> 1) or (0 -> textureWidth)
	//https://answers.unity.com/questions/783770/screenspace-to-worldspace-in-computeshader.html
	float2 pixelPos = float2(((float)id.x), ((float)id.y));
	float2 clipPos = float2(
		2.0 * pixelPos.x * (1.0 / screenSize.x) - 1.0,
		1.0 - 2.0 * pixelPos.y * (1.0 / screenSize.y));

	float4 worldPos = mul(float4(clipPos, 1, 1), INVERSE_MATRIX_VP);
	float3 realWorldPos = worldPos.xyz * worldPos.w;
	//currently taking pixel distance from bottom left position of screen.
	for (uint i = 0; i < Agents.Length; ++i)
	{
		dist = min(dist, length(realWorldPos - Agents[i].position));
	}

	if (dist < 10)
		WorldState[id.xy] = float4(1, 0, 1, 0);
	else
		WorldState[id.xy] = float4(1, 1, 1, 0);
}

[numthreads(1024, 1, 1)]
void TestMove(uint3 id : SV_DispatchThreadID)
{
	//Agents[id.x].angularVelocity = 3.0;

	//float rotAmt = radians(3.0);
	//float3 dir = Agents[id.x].orientation;
	//Agents[id.x].orientation = float3(
	//	dir.x * cos(rotAmt) - dir.z * sin(rotAmt),
	//	0,
	//	dir.x * sin(rotAmt) + dir.z * cos(rotAmt));

	Agents[id.x].position.xyz += Agents[id.x].orientation * Agents[id.x].speed * dt;
}

//texture based approach
//performs poorly (15fps) with few traversed pixels and no actual avoidance logic. Probably because of first pass for object locations
[numthreads(1024, 1, 1)]
void Move(uint3 id : SV_DispatchThreadID)
{
	float4 f4pos = float4(Agents[id.x].position.x, Agents[id.x].position.y, Agents[id.x].position.z, 1.0);

	//custom pixel space conversion | did this because I got desperate... was completely unnecessary :( stupid mistake in passing info to the shader
	//https://www.scratchapixel.com/lessons/3d-basic-rendering/computing-pixel-coordinates-of-3d-point/mathematics-computing-2d-coordinates-of-3d-points
	/*float4 cameraSpacePos = mul(CAMERA_MATRIX, f4pos);	
	float2 screenPos = float2(cameraSpacePos.x / -cameraSpacePos.z, cameraSpacePos.y / -cameraSpacePos.z);
	float2 ndcPos = float2((screenPos.x + screenSize.x / 2) / screenSize.x, (screenPos.y + screenSize.y / 2) / screenSize.y);
	int lerpedX = round(lerp(0, (int)textureSize.x, ndcPos.x));
	int lerpedY = round(lerp(0, (int)textureSize.y, 1-ndcPos.y));*/

	float4x4 mvp = mul(MATRIX_VP, Agents[id.x].modelMatrix);
	float4 screenPos = mul(mvp, f4pos); //agents are spawned in world space so no model matrix is needed

	int lerpedX = round(lerp(0, (int)textureSize.x, 0.5*(1+screenPos.x)));
	int lerpedY = round(lerp((int)textureSize.y, 0, 0.5*(1+screenPos.y)));

	for (int y = lerpedY - 5; y < lerpedY + 5; y++)
	{
		for (int x = lerpedX - 5; x < lerpedX + 5; x++)
		{
			if (x == lerpedX && y == lerpedY)
				continue;
			WorldState[uint2(x, y)] = float4(1, 0, 1, 0);

			if (distance(WorldState[uint2(x, y)], float4(1, 1, 1, 1)) < 0.1)
			{
				Agents[id.x].speed = 0.0;
			}
			else {
				Agents[id.x].speed = 1.0;

			}

		}
	}
	Agents[id.x].position += Agents[id.x].orientation * Agents[id.x].speed;

}

[numthreads(1024,1,1)]
void AvoidStaticObstacles(uint3 id : SV_DispatchThreadID)
{
	float3 pos = Agents[id.x].position + Agents[id.x].orientation * Agents[id.x].speed * dt;
	//float3 pos = Agents[id.x].position;
	float4 f4pos = float4(pos.x, pos.y, pos.z, 1.0);
	
	float4 screenPos = mul(MATRIX_VP, f4pos);
	int lerpedX = round(lerp(0, textureSize.x, 0.5 * (1 + screenPos.x)));
	int lerpedY = round(lerp(textureSize.y, 0, 0.5 * (1 + screenPos.y))); //y-axis is flipped for texture (is this some d3d stuff??)
	//check nxn pixel box around position for obstacles
	/*
   -2-1 0 1 2
	~ o o o o
	~ ~ o o o
	~ ~ X o o 
	o o o o o
	o o o o o
	-> if all is free dont adjust direction.
	-> otherwise adjust direction to where more is free (use inverse vector of balance point)
	*/
	float2 dirFree = float2(0.0, 0.0);
	int checkRange = 8;
	for (int y = lerpedY - checkRange; y <= lerpedY + checkRange; y++)
	{
		for (int x = lerpedX - checkRange; x <= lerpedX + checkRange; x++)
		{
			float dx = x - lerpedX;
			float dy = y - lerpedY;

			if (OutOfBounds(x,y, (int)textureSize.x, (int)textureSize.y) || 
				distance(WorldState[uint2(x, y)].xyz, float3(1, 1, 1)) > 0.1)
			{
				dirFree += float2(dx, dy);	
			}
			else {
				//WorldState[uint2(x, y)] = float4(1, 0, 1, 1);
			}
		}
	}
	if (length(dirFree) > 0.0)
	{
		dirFree.x = 2 * dirFree.x / (float)textureSize.x - 1;
		dirFree.y = 2 * dirFree.y / (float)textureSize.y - 1;
		float4 realDir = mul(float4(dirFree.x, dirFree.y, 0.0, 1.0), INVERSE_MATRIX_VP);
		if (length(realDir) > 0.0)
		{
			Agents[id.x].orientation = float3(-Agents[id.x].orientation.z, 0, Agents[id.x].orientation.x);
		}
	}

}

[numthreads(128, 1, 1)]
void MoveV2(uint3 id : SV_DispatchThreadID)
{
	float3 d = Agents[id.x].orientation;
	float3 o = Agents[id.x].position;
	Agents[id.x].angularVelocity = 0.0;
	//float freeLeft = -RAY_ANGLE - 1.0; //the minimum angle where no intersection was hit to the left
	//float freeRight = RAY_ANGLE + 1.0; //the maximum angle where no intersection happened to the right

	float freeAngle = 1000.0;
	bool foundOne = true;

	bool freeAngles[30 * 2 + 1];
	for (int c = 0; c < freeAngles.Length; ++c)
		freeAngles[c] = true;

	for (int i = 0; i < Agents.Length; ++i)
	{
		//do not check against yourself
		if (Agents[i].id == Agents[id.x].id)
			continue;
		float3 ab = o - Agents[i].position;
		if (dot(ab, ab) > 4.0)
			continue;
		float3 orientationOther = Agents[i].orientation;
		if (acos(dot(orientationOther, d)) < radians(30.0f))	//if the other agent is travelling in roughly the same direction as we are, igore 
			continue;											//since orientation is normalized we dont need to devide by length

			
		foundOne = true;
		float dist = 100000.0;

		int angleForCurrentCheck = FindFreeAngleV2(		//check the angle at which the current agent blocks the path and return the angle index
			RAY_ANGLE,
			Agents[i].position,
			Agents[i].colliderRadius,
			d,
			o,
			RAY_RESOLUTION);

		if (angleForCurrentCheck != -1)
			freeAngles[angleForCurrentCheck] = false;


		/*freeLeft = FindFreeAngle(
			freeLeft,
			-RAY_ANGLE,
			Agents[i].position,
			Agents[i].colliderRadius,
			d,
			o,
			RAY_RESOLUTION
		);
		freeRight = FindFreeAngle(
			freeRight,
			RAY_ANGLE,
			Agents[i].position,
			Agents[i].colliderRadius,
			d,
			o,
			RAY_RESOLUTION
		);*/


	}

	//freeLeft = 1.0;
	//freeRight = 1.0; //free left & free right are NaN

	//get the minimum angle we have while still going straight
	float angle = Agents[id.x].angularVelocity;
	if (foundOne)
	{
		for (int i = 0; i < RAY_RESOLUTION; i++)
		{
			int a = RAY_RESOLUTION - i;
			int b = RAY_RESOLUTION + i;
			if (freeAngles[a] == true)
			{
				angle = lerp(-RAY_ANGLE, RAY_ANGLE, (float)a/(float)(2.0*RAY_RESOLUTION));
				break;
			}
			else if (freeAngles[b] == true)
			{
				angle = lerp(-RAY_ANGLE, RAY_ANGLE, (float)a/(float)(2.0*RAY_RESOLUTION));
				break;
			}
		}
		//if (dist < 1.0)
		//{
		//	Agents[id.x].speed = lerp(Agents[id.x].speed, 1.0, 0.1);
		//	Agents[id.x].angularVelocity = 5.0;
		//}
		//else
		//{
		//	Agents[id.x].speed = 4.0;
		//	Agents[id.x].angularVelocity = 0.0;
		//}
		Agents[id.x].angularVelocity = lerp(Agents[id.x].angularVelocity, angle, 1.0);
	}
	else
		Agents[id.x].angularVelocity = lerp(Agents[id.x].angularVelocity, 0.0, 0.3);

	//if (dist < 1.0)
	//{
	//	Agents[id.x].speed = lerp(Agents[id.x].speed, 1.0, 0.1);
	//	Agents[id.x].angularVelocity = 5.0;
	//}
	//else
	//{
	//	Agents[id.x].speed = 4.0;
	//	Agents[id.x].angularVelocity = 0.0;
	//}
	float rotAmt = radians(Agents[id.x].angularVelocity);
	float3 dir = Agents[id.x].orientation;
	Agents[id.x].orientation = float3(
		dir.x * cos(rotAmt) - dir.z * sin(rotAmt),
		0,
		dir.x * sin(rotAmt) + dir.z * cos(rotAmt));
	Agents[id.x].position += Agents[id.x].orientation * Agents[id.x].speed * dt;

}
bool OutOfBounds(int x, int y, int maxX, int maxY)
{
	return x < 0 || x >= textureSize.x || y < 0 || y >= textureSize.y;
}

//v0 this is very inefficient because we always shoot all rays.
float GetNextAngle(
	float lastAngle, 
	float maxAngle, 
	float rayStep, 
	float3 otherPosition, 
	float colliderRadius,
	float3 direction, 
	float3 origin, 
	float rayResolution)
{
	float currAngle = lerp(maxAngle, 0, abs(rayStep) / rayResolution);
	float currAngleRad = radians(currAngle);
	float3 rotatedRayDir = float3(
		direction.x * cos(currAngleRad) - direction.z * sin(currAngleRad),
		0.0,
		direction.x * sin(currAngleRad) + direction.z * cos(currAngleRad));

	float currDist = length(cross(rotatedRayDir, otherPosition - origin));
	//if we didnt hit anything update the free angle
	if (currDist > colliderRadius)
	{
		return currAngle;
	}
	return lastAngle;
}

float FindFreeAngle(
	float currAngle,
	float maxAngle,
	float3 otherPosition,
	float colliderRadius,
	float3 direction,
	float3 origin,
	float rayResolution) 
{
	float output = currAngle;
	float step = sign(maxAngle);
	for (float j = 0; j < rayResolution; j++)
	{
		output = GetNextAngle(
			output,
			maxAngle,
			j,
			otherPosition,
			colliderRadius,
			direction,
			origin,
			rayResolution);
	}
	return output;
}

int FindFreeAngleV2(
	float maxAngle,
	float3 otherPosition,
	float colliderRadius,
	float3 direction,
	float3 origin,
	float rayResolution
)
{
	for (int j = 0; j < rayResolution; j++)
	{
		float angle = lerp(0, maxAngle, (float)j / rayResolution);
		float currAngleRad = radians(angle);
		float3 rayDir = float3(
			direction.x * cos(currAngleRad) - direction.z * sin(currAngleRad),
			0.0,
			direction.x * sin(currAngleRad) + direction.z * cos(currAngleRad));

		if (IntersectCircle(rayDir, origin, otherPosition, colliderRadius))
		{
			return (int)rayResolution + j;
		}
		if (j == 0) continue; //center ray only needs to be checked once

		currAngleRad = radians(-angle);
		rayDir = float3(
			direction.x * cos(currAngleRad) - direction.z * sin(currAngleRad),
			0.0,
			direction.x * sin(currAngleRad) + direction.z * cos(currAngleRad));

		if (IntersectCircle(rayDir, origin, otherPosition, colliderRadius))
		{
			return (int)rayResolution - j;
		}
	}

	return -1;
}

bool IntersectCircle(
	float3 d,
	float3 o,
	float3 otherPosition,
	float otherColliderRadius)
{
	return length(cross(d, otherPosition - o)) < otherColliderRadius;
}

//https://answers.unity.com/questions/218333/index.html
float4x4 inverse(float4x4 input)
{
#define minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))
	//determinant(float3x3(input._22_23_23, input._32_33_34, input._42_43_44))

	float4x4 cofactors = float4x4(
		minor(_22_23_24, _32_33_34, _42_43_44),
		-minor(_21_23_24, _31_33_34, _41_43_44),
		minor(_21_22_24, _31_32_34, _41_42_44),
		-minor(_21_22_23, _31_32_33, _41_42_43),

		-minor(_12_13_14, _32_33_34, _42_43_44),
		minor(_11_13_14, _31_33_34, _41_43_44),
		-minor(_11_12_14, _31_32_34, _41_42_44),
		minor(_11_12_13, _31_32_33, _41_42_43),

		minor(_12_13_14, _22_23_24, _42_43_44),
		-minor(_11_13_14, _21_23_24, _41_43_44),
		minor(_11_12_14, _21_22_24, _41_42_44),
		-minor(_11_12_13, _21_22_23, _41_42_43),

		-minor(_12_13_14, _22_23_24, _32_33_34),
		minor(_11_13_14, _21_23_24, _31_33_34),
		-minor(_11_12_14, _21_22_24, _31_32_34),
		minor(_11_12_13, _21_22_23, _31_32_33)
		);
#undef minor
	return transpose(cofactors) / determinant(input);
}
